"""
Gerador de Palavras de Gest√£o com Mapa de Calor
Autor: Elias Andrade - Arquiteto de Solu√ß√µes
Vers√£o: 1.0.0 (Micro-revis√£o 000000001)
Data: 2024-03-27
Descri√ß√£o: Gera 14 mil palavras sobre gest√£o empresarial com visualiza√ß√£o em tempo real.
"""

import pygame
from pygame.locals import *
from OpenGL.GL import *
from OpenGL.GLU import *
import numpy as np
import time
from rich.console import Console
from rich.panel import Panel
import threading
import queue
from transformers import GPT2LMHeadModel, GPT2Tokenizer
import torch
import random
from datetime import datetime
import os

console = Console()

class GeradorPalavrasGestao:
    def __init__(self):
        self.width = 256
        self.height = 256
        self.window_size = (1200, 800)
        self.running = True
        self.palavras_geradas = 0
        self.total_palavras = 14000
        self.output_file = f"palavras_gestao_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        # Temas e contextos
        self.temas = {
            'gestao': [
                "gest√£o empresarial", "administra√ß√£o", "lideran√ßa", "estrat√©gia",
                "planejamento", "efici√™ncia", "produtividade", "performance",
                "resultados", "metas", "objetivos", "indicadores"
            ],
            'financeiro': [
                "receita", "custos", "despesas", "lucro", "investimento",
                "or√ßamento", "fluxo de caixa", "rentabilidade", "roi",
                "faturamento", "margem", "capital"
            ],
            'processos': [
                "otimiza√ß√£o", "automa√ß√£o", "padroniza√ß√£o", "qualidade",
                "melhoria cont√≠nua", "lean", "six sigma", "processos",
                "workflow", "metodologia", "framework", "boas pr√°ticas"
            ]
        }
        
        # Prompts base
        self.prompts = [
            "Como melhorar a {} da empresa atrav√©s de {}",
            "Implementando {} para aumentar a {}",
            "Estrat√©gias de {} focadas em {}",
            "Boas pr√°ticas de {} para otimizar {}",
            "Metodologia {} aplicada √† {}",
            "T√©cnicas de {} para maximizar {}"
        ]
        
        # Buffer para o mapa de calor
        self.heat_map = np.zeros((self.width, self.height, 3), dtype=np.float32)
        self.palavras_buffer = []
        
        # Inicializa modelo
        self.tokenizer = GPT2Tokenizer.from_pretrained('pierreguillou/gpt2-small-portuguese')
        self.model = GPT2LMHeadModel.from_pretrained('pierreguillou/gpt2-small-portuguese')
        self.model.eval()
        
    def gerar_prompt(self):
        """Gera um prompt aleat√≥rio combinando temas"""
        tema1 = random.choice(list(self.temas.keys()))
        tema2 = random.choice(list(self.temas.keys()))
        palavra1 = random.choice(self.temas[tema1])
        palavra2 = random.choice(self.temas[tema2])
        prompt = random.choice(self.prompts).format(palavra1, palavra2)
        return prompt
        
    def gerar_texto(self, prompt):
        """Gera texto baseado no prompt"""
        try:
            inputs = self.tokenizer.encode(prompt, return_tensors='pt')
            outputs = self.model.generate(
                inputs,
                max_length=100,
                num_return_sequences=1,
                temperature=0.8,
                top_k=50,
                top_p=0.95,
                do_sample=True,
                pad_token_id=self.tokenizer.eos_token_id
            )
            texto = self.tokenizer.decode(outputs[0], skip_special_tokens=True)
            return texto
        except Exception as e:
            console.print(f"[bold red]‚ùå Erro na gera√ß√£o: {str(e)}[/]")
            return ""
            
    def atualizar_mapa_calor(self):
        """Atualiza o mapa de calor baseado nas palavras geradas"""
        try:
            # Calcula progresso
            progresso = self.palavras_geradas / self.total_palavras
            
            # Atualiza mapa gradualmente
            for i in range(self.width):
                for j in range(self.height):
                    if random.random() < progresso:
                        # Verde aumenta com o progresso
                        self.heat_map[i, j, 0] = 1 - progresso  # Vermelho diminui
                        self.heat_map[i, j, 1] = progresso      # Verde aumenta
                        self.heat_map[i, j, 2] = 0.0            # Sem azul
                        
        except Exception as e:
            console.print(f"[bold red]‚ùå Erro na atualiza√ß√£o do mapa: {str(e)}[/]")
            
    def salvar_palavras(self, texto):
        """Salva palavras geradas no arquivo"""
        try:
            with open(self.output_file, 'a', encoding='utf-8') as f:
                f.write(texto + "\n\n")
        except Exception as e:
            console.print(f"[bold red]‚ùå Erro ao salvar: {str(e)}[/]")
            
    def processar_geracoes(self):
        """Processa gera√ß√£o de palavras em background"""
        while self.running and self.palavras_geradas < self.total_palavras:
            try:
                prompt = self.gerar_prompt()
                texto = self.gerar_texto(prompt)
                
                if texto:
                    self.palavras_geradas += len(texto.split())
                    self.salvar_palavras(texto)
                    console.print(f"[green]‚úì Geradas {self.palavras_geradas} palavras[/]")
                    
            except Exception as e:
                console.print(f"[bold red]‚ùå Erro no processamento: {str(e)}[/]")
                
    def inicializar_pygame(self):
        """Inicializa PyGame e OpenGL"""
        pygame.init()
        pygame.display.set_mode(self.window_size, DOUBLEBUF | OPENGL)
        pygame.display.set_caption("Gerador de Palavras - Mapa de Calor")
        
        # Configura√ß√£o OpenGL
        glEnable(GL_TEXTURE_2D)
        glViewport(0, 0, *self.window_size)
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        gluOrtho2D(-1, 1, -1, 1)
        glMatrixMode(GL_MODELVIEW)
        glLoadIdentity()
        
        # Cria textura
        self.texture_id = glGenTextures(1)
        glBindTexture(GL_TEXTURE_2D, self.texture_id)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR)
        
    def renderizar(self):
        """Renderiza o mapa de calor"""
        glClear(GL_COLOR_BUFFER_BIT)
        glLoadIdentity()
        
        # Atualiza textura
        glBindTexture(GL_TEXTURE_2D, self.texture_id)
        glTexImage2D(
            GL_TEXTURE_2D, 0, GL_RGB, self.width, self.height, 0,
            GL_RGB, GL_FLOAT, self.heat_map
        )
        
        # Desenha quad com textura
        glBegin(GL_QUADS)
        glTexCoord2f(0, 0); glVertex2f(-1, -1)
        glTexCoord2f(1, 0); glVertex2f(1, -1)
        glTexCoord2f(1, 1); glVertex2f(1, 1)
        glTexCoord2f(0, 1); glVertex2f(-1, 1)
        glEnd()
        
        pygame.display.flip()
        
    def executar(self):
        """Loop principal"""
        # Inicia thread de gera√ß√£o
        thread_geracao = threading.Thread(target=self.processar_geracoes)
        thread_geracao.daemon = True
        thread_geracao.start()
        
        fps_clock = pygame.time.Clock()
        
        while self.running and self.palavras_geradas < self.total_palavras:
            # Eventos
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    self.running = False
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        self.running = False
            
            # Atualiza e renderiza
            self.atualizar_mapa_calor()
            self.renderizar()
            
            # Atualiza t√≠tulo
            progresso = (self.palavras_geradas / self.total_palavras) * 100
            pygame.display.set_caption(
                f"Gerador de Palavras - {progresso:.1f}% Completo - "
                f"{self.palavras_geradas}/{self.total_palavras} palavras"
            )
            
            fps_clock.tick(30)
        
        pygame.quit()

if __name__ == "__main__":
    try:
        console.print(Panel.fit(
            "[bold green]Gerador de Palavras de Gest√£o com Mapa de Calor[/]\n"
            "Por: Elias Andrade - Arquiteto de Solu√ß√µes\n"
            "Replika AI - Maring√°, PR",
            title="üöÄ Iniciando Aplica√ß√£o",
            border_style="green"
        ))
        
        start_time = time.time()
        
        # Cria e executa gerador
        gerador = GeradorPalavrasGestao()
        gerador.inicializar_pygame()
        gerador.executar()
        
        tempo_total = time.time() - start_time
        console.print(f"\n‚è±Ô∏è Tempo total de execu√ß√£o: {tempo_total:.2f} segundos", style="bold blue")
        console.print(f"\nüìù Arquivo gerado: {gerador.output_file}", style="bold green")
        
    except Exception as e:
        console.print(f"[bold red]‚ùå Erro: {str(e)}[/]")
        raise

"""
Assinatura: Elias Andrade
Arquiteto de Solu√ß√µes
Replika AI - Maring√°, PR
"""
